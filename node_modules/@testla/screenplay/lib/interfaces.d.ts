export interface IActor {
    attributes: {
        [key: string]: any;
    };
    with(key: string, value: any): IActor;
    states(key: string): any;
    asks<T>(question: IQuestion<T>, activityResult: T): Promise<T>;
    withAbilityTo(ability: IAbility): IAbility;
    can(ability: IAbility): IActor;
    attemptsTo(...activities: (ITask | IAction)[]): Promise<any>;
}
export interface IAbility {
    name: string;
}
/**
 * An object representing an action that an {@link IActor} can perform.
 */
export interface IAction {
    /**
     *  Makes the provided {@link IActor}
     *  perform this Action.
     *
     * @param {IActor} actor
     * @returns {Promise<any>}
     *
     * @see {@link IActor}
     */
    performAs(actor: IActor): Promise<any>;
}
/**
 * An object representing a task that an {@link IActor} can perform.
 */
export interface ITask {
    /**
     *  Makes the provided {@link IActor}
     *  perform this Task.
     *
     * @param {IActor} actor
     * @returns {Promise<any>}
     *
     * @see {@link IActor}
     */
    performAs(actor: IActor): Promise<any>;
}
export interface IQuestion<T> {
    /**
     * Implementation of the query answer.
     *
     * @param {IActor} actor the actor that queries.
     */
    answeredBy(actor: IActor): Promise<T>;
}
