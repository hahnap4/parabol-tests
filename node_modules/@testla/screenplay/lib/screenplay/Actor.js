"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Actor = void 0;
/**
 * Actors use abilities in order to execute tasks/actions and answer questions.
 */
class Actor {
    constructor(name) {
        // collection of attributes assigned to the actor
        this.attributes = {};
        // map of abilities of this Actor
        this.abilityMap = new Map();
        this.attributes = { name };
    }
    /**
     * Store an attribute in the actors attribute collection.
     * @param key attribute name
     * @param value attribute value
     * @returns {Actor}
     */
    with(key, value) {
        this.attributes = Object.assign(Object.assign({}, this.attributes), { [key]: value });
        return this;
    }
    /**
     * Get an attribute from the actors attribute collection.
     * @param key Key for the attribute
     * @returns Value for the requested attribute
     */
    states(key) {
        return this.attributes[key];
    }
    /** Create a new Actor with a given name. */
    static named(name) {
        return new Actor(name);
    }
    /**
     * Sets username and password for the actor.
     *
     * @param username
     * @param password
     * @returns the actor object
     *
     * @deprecated This method is deprecated and will be removed in the future. Use
     */
    withCredentials(username, password) {
        this.attributes.username = username;
        this.attributes.password = password;
        return this;
    }
    /**
     * Assign one or more abilities to the actor. e.g. Browsing, SFT-Client, HTTP-Client, ...
     *
     * @param abilities the abilities the actor will be able to use.
     */
    can(...abilities) {
        abilities.forEach((ability) => this.abilityMap.set(ability.name, ability));
        return this;
    }
    /**
     * Executes the given Tasks/Actions.
     *
     * @param activities a list of tasks to execute.
     */
    attemptsTo(...activities) {
        // execute each activity in order.
        const reducefn = (chain, activity) => chain.then(() => activity.performAs(this));
        return activities.reduce(reducefn, Promise.resolve());
    }
    /**
     * Verify if the actor has the given ability.
     *
     * @param ability the ability.
     */
    withAbilityTo(ability) {
        if (!this.abilityMap.has(ability.name)) {
            throw new Error('Error: This Actor does not have this ability!');
        }
        return this.abilityMap.get(ability.name);
    }
    /**
     * Ask a question.
     *
     * @param question the question to ask.
     */
    asks(question) {
        return question.answeredBy(this);
    }
}
exports.Actor = Actor;
